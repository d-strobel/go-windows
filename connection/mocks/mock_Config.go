// Code generated by mockery v2.38.0. DO NOT EDIT.

package connection

import (
	connection "github.com/d-strobel/gowindows/connection"
	mock "github.com/stretchr/testify/mock"
)

// MockConfig is an autogenerated mock type for the Config type
type MockConfig struct {
	mock.Mock
}

type MockConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfig) EXPECT() *MockConfig_Expecter {
	return &MockConfig_Expecter{mock: &_m.Mock}
}

// Defaults provides a mock function with given fields:
func (_m *MockConfig) Defaults() {
	_m.Called()
}

// MockConfig_Defaults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Defaults'
type MockConfig_Defaults_Call struct {
	*mock.Call
}

// Defaults is a helper method to define mock.On call
func (_e *MockConfig_Expecter) Defaults() *MockConfig_Defaults_Call {
	return &MockConfig_Defaults_Call{Call: _e.mock.On("Defaults")}
}

func (_c *MockConfig_Defaults_Call) Run(run func()) *MockConfig_Defaults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_Defaults_Call) Return() *MockConfig_Defaults_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfig_Defaults_Call) RunAndReturn(run func()) *MockConfig_Defaults_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient provides a mock function with given fields:
func (_m *MockConfig) NewClient() (connection.Connection, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewClient")
	}

	var r0 connection.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func() (connection.Connection, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() connection.Connection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(connection.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfig_NewClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewClient'
type MockConfig_NewClient_Call struct {
	*mock.Call
}

// NewClient is a helper method to define mock.On call
func (_e *MockConfig_Expecter) NewClient() *MockConfig_NewClient_Call {
	return &MockConfig_NewClient_Call{Call: _e.mock.On("NewClient")}
}

func (_c *MockConfig_NewClient_Call) Run(run func()) *MockConfig_NewClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_NewClient_Call) Return(_a0 connection.Connection, _a1 error) *MockConfig_NewClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfig_NewClient_Call) RunAndReturn(run func() (connection.Connection, error)) *MockConfig_NewClient_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields:
func (_m *MockConfig) Validate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfig_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockConfig_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
func (_e *MockConfig_Expecter) Validate() *MockConfig_Validate_Call {
	return &MockConfig_Validate_Call{Call: _e.mock.On("Validate")}
}

func (_c *MockConfig_Validate_Call) Run(run func()) *MockConfig_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_Validate_Call) Return(_a0 error) *MockConfig_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_Validate_Call) RunAndReturn(run func() error) *MockConfig_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfig creates a new instance of MockConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfig {
	mock := &MockConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
