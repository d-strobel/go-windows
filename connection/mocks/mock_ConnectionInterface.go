// Code generated by mockery v2.38.0. DO NOT EDIT.

package connection

import (
	context "context"

	connection "github.com/d-strobel/gowindows/connection"

	mock "github.com/stretchr/testify/mock"
)

// MockConnectionInterface is an autogenerated mock type for the ConnectionInterface type
type MockConnectionInterface struct {
	mock.Mock
}

type MockConnectionInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionInterface) EXPECT() *MockConnectionInterface_Expecter {
	return &MockConnectionInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockConnectionInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnectionInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConnectionInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConnectionInterface_Expecter) Close() *MockConnectionInterface_Close_Call {
	return &MockConnectionInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConnectionInterface_Close_Call) Run(run func()) *MockConnectionInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectionInterface_Close_Call) Return(_a0 error) *MockConnectionInterface_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionInterface_Close_Call) RunAndReturn(run func() error) *MockConnectionInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx, cmd
func (_m *MockConnectionInterface) Run(ctx context.Context, cmd string) (connection.CMDResult, error) {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 connection.CMDResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (connection.CMDResult, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) connection.CMDResult); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Get(0).(connection.CMDResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionInterface_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockConnectionInterface_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd string
func (_e *MockConnectionInterface_Expecter) Run(ctx interface{}, cmd interface{}) *MockConnectionInterface_Run_Call {
	return &MockConnectionInterface_Run_Call{Call: _e.mock.On("Run", ctx, cmd)}
}

func (_c *MockConnectionInterface_Run_Call) Run(run func(ctx context.Context, cmd string)) *MockConnectionInterface_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConnectionInterface_Run_Call) Return(_a0 connection.CMDResult, _a1 error) *MockConnectionInterface_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionInterface_Run_Call) RunAndReturn(run func(context.Context, string) (connection.CMDResult, error)) *MockConnectionInterface_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionInterface creates a new instance of MockConnectionInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionInterface {
	mock := &MockConnectionInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
